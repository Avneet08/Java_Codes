import java.math.BigInteger;

public class Rough {
	static BigInteger MOD =BigInteger.valueOf(1000000007);
	 static BigInteger a,b,c,d,e=BigInteger.valueOf(0);
static long sum1=18;
static long sum2=45;

	static void fast_fib(int n,BigInteger ans[])
	{
	    if(n == 0)
	    {
	        ans[0] = BigInteger.valueOf(0);
	        ans[1] =BigInteger.valueOf(1);
	        return;
	    }
	    fast_fib((n/2),ans);
	    a = ans[0];             /* F(n) */
	    b = ans[1];             /* F(n+1) */
	    e = b.multiply(BigInteger.valueOf(2));
	    c=e.subtract(a);
	    if( c.compareTo(BigInteger.valueOf(0))==-1)
	        c=c.add(MOD);
	    c = (a .multiply(c)) .mod(MOD);      /* F(2n) */
	    d = (a.pow(2) .add( b.pow(2))) .mod(MOD) ;  /* F(2n + 1) */
	    if(n%2 == 0)
	    {
	        ans[0] = c;
	        ans[1] = d;
	    }
	    else
	    {
	        ans[0] = d;
	        ans[1] = c.add(d);
	    }
	   // System.out.println(ans[0]);
	}
	public static void main(String[] args) {
		BigInteger ans[]=new BigInteger[1000000000];
		 fast_fib(6,ans);
		System.out.println(ans[0]);
	}

}

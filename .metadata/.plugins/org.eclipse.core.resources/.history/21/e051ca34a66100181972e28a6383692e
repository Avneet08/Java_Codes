import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

public class LandLeveling {
	private static void Landret(ArrayList<Integer> arr,int k,int n,int[] minvalues) {
		 LinkedList<Integer> q = new LinkedList<Integer>();
	       int  i =0;
	       for( i=0;i<k;i++) {
	        
	            while(!q.isEmpty() && arr.get(i) <= arr.get(q.peekLast())){
	                q.removeLast();
	            }
	            q.addLast(i);
	          
	        }
	     
	       
	        for(i=k;i<n;i++) {
	            minvalues[i-k] = arr.get(q.peek());
	            while (!q.isEmpty() && q.peek() <= i-k){
	                q.removeFirst();
	            }
	            while (!q.isEmpty() && arr.get(i) <= arr.get(q.peekLast())){
	                q.removeLast();
	            }
	            q.addLast(i);
	           
	        }
	        minvalues[n-k] = arr.get(q.peek());
	}
private static long land_min(int n ,int k,int[] minvalues,ArrayList<Integer> arr ) {
	 long min_value = Long.MAX_VALUE;
     int i =0;
     for(i=0;i<=n-k;i++) {
   
         long sum = 0;
         int j = i;
         while(j < i+k) {
             sum = sum + arr.get(j)- minvalues[i];
             j++;
         }
         min_value = Math.min(sum, min_value);
       
     }
    return min_value;
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 Scanner sc = new Scanner(System.in);
		 int n=sc.nextInt();
		 int k=sc.nextInt();
		 ArrayList<Integer> arr=new ArrayList<Integer>();
		 for(int i=0;i<n;i++) {
			 arr.add(sc.nextInt());
		 }
		 int minvalues[] = new int[n-k+1];
		 Landret(arr,k,n,minvalues);
	      
	    long x=land_min(n,k,minvalues,arr);
	    System.out.println(x);
		 
	}

}

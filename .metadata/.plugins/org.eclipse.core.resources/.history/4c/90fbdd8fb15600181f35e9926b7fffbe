import java.math.BigInteger;
import java.util.Arrays;
import java.util.Scanner;

public class FAKEBS {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		int u=0;
		
			while(u<T) {
			int N = sc.nextInt();
			int Q = sc.nextInt();
			BigInteger arr[] = new BigInteger[N];
			
			
			for(int i =0;i<N;i++){
				arr[i] = sc.nextBigInteger(); 
				
			}
			
			BigInteger arr2[] = new BigInteger[N];
			for(int j=0;j<N;j++) {
				arr2[j]=arr[j];
			}
			int i=0;
			while(i<Q){
				Long x = sc.nextLong();
				
				Arrays.sort(arr);
				int a=findx(arr2,N,x);
				int b_index = Bsearch(arr,x);
				makemoves(arr2,arr,x,a,b_index);
				
				
			
			i++;	
			}
		u++;
		}
	}
	private static int findx(BigInteger arr2[],int N,Long x) {
		int a= -1;
		for(int i =0;i<N;i++){
			if(arr2[i].compareTo(BigInteger.valueOf(x))==0){
				a = i;
				break;
			}
			
		}
		return a;
	}
	private static void makemoves(BigInteger arr2[],BigInteger arr[],Long x,int a,int b_index) {
		int low = 0;
	    int high = arr2.length-1;
	    int mid =0;
	    int left_moves = 0;
		int right_moves =0;
	    while(low <= high){
	    	mid = (low + high) / 2;
			        if(arr2[mid] .compareTo(BigInteger.valueOf(x))==0){
			            break;
			        }
			        else if(arr2[mid].compareTo(BigInteger.valueOf(x)) ==1  && a > mid){
			        	
			        	left_moves++;
			        	low = mid+1;
			        }
			        else if(arr2[mid] .compareTo(BigInteger.valueOf(x)) ==-1 && a > mid){
			            low = mid+1;
			        }
			        else if(arr2[mid].compareTo(BigInteger.valueOf(x)) ==1  && a < mid){
			            high = mid-1;
			        }
			        else if(arr2[mid].compareTo(BigInteger.valueOf(x)) ==-1 && a < mid){
			        	right_moves++;
			        	high = mid-1;
			        }
	    }
	    check(left_moves,b_index,right_moves,arr2.length - b_index);
	}
private static void check(int left_moves,int b_index ,int right_moves,int right) {
	if(left_moves>b_index || right_moves>right){
    	System.out.println("-1");
    }
    else{
    	System.out.println( left_moves + right_moves);
    }
}
	private static int Bsearch(BigInteger[] arr, Long x) {
		// TODO Auto-generated method stub
		    int low = 0;
		    int high = arr.length;
		    int mid =0;
		    while(low <= high){
		    	mid = (low + high) / 2;
				        if(arr[mid] .compareTo(BigInteger.valueOf(x))==0){
				            break;
				        }
				        else if(arr[mid] .compareTo(BigInteger.valueOf(x)) ==1){
				        	high = mid-1;
				            
				        }
				        else{
				        	low = mid+1;
				        }
		    }
		    return mid;
	}
}

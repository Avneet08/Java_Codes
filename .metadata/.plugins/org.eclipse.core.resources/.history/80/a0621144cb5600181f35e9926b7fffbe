import java.math.BigInteger;
import java.util.*;
class Marker{
	int index_a;
	int index_b;
	public Marker(int index_a,int index_b) {
		this.index_a=index_a;
		this.index_b=index_b;
	}
	
}

public class FAKEBS {
	private static void check(int left_moves,int b_index ,int right_moves,int right) {
		if(left_moves>b_index ){
	    	System.out.println("-1");
	    }else if( right_moves>right) {
	    	System.out.println("-1");
	    }
	    else{
	    	System.out.println( Math.max(left_moves, right_moves) );
	    }
	}
 private static void makemoves(Long[] arr2,Long[] arr,Long x,int a,int b_index) {
		int low = 0;
	    int high = arr2.length-1;
	    int left=b_index;
	    int mid =0;
	    int right =arr2.length - b_index-1;
	    int left_moves = 0;
		int right_moves =0;
	    while(low <= high){
	    	mid = (low + high) / 2;
			        if(arr2[mid] ==x){
			            break;
			        }
			        else if(arr2[mid] > x  && a > mid){
			        	
			        	left_moves++;
			        	low = mid+1;
			        }
			        else if(arr2[mid] < x && a > mid){
			            low = mid+1;
			            left--;
			        }
			        else if(arr2[mid] < x && a < mid){
			        	right_moves++;
			        	high = mid-1;
			        }
			        else if(arr2[mid] > x  && a < mid){
			            high = mid-1;
			            right--;
			            
			        }
			        
	    }
	    check(left_moves,left,right_moves,right);
	}
private static int Binarysearch(Long[] arr, Long arr2) {
		
	    int low = 0;
	    int high = arr.length-1;
	    int mid =0;
	    while(low <= high){
	    	mid = (low + high) / 2;
			        if(arr[mid] ==arr2){
			            break;
			        }
			        else if(arr[mid] >arr2){
			        	high = mid-1;
			            
			        }
			        else{
			        	low = mid+1;
			        }
	    }
	    return mid;
}
		
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		int u=0;
		
			while(u<T) {
			int N = sc.nextInt();
			int Q = sc.nextInt();
			Long arr[] = new Long[N];
			
			HashMap<Long,Marker> hashmap = new HashMap<Long,Marker>();
			Long arr2[] = new Long[N];
			int i=0;
			while(i<N) {
				arr[i] = sc.nextLong(); 
				arr2[i]=arr[i];
				i++;
			}
			Arrays.sort(arr);
		for(int i1 =0;i1<N;i1++){
				int v=Binarysearch(arr,arr2[i1]);
				hashmap.put(arr2[i1], new Marker(i1, v));
			}
			int i1=0;
			
			while(i1<Q){
				Long x = sc.nextLong();
				Marker a=hashmap.get(x);
				makemoves(arr2,arr,x,a.index_a,a.index_b);
			i1++;	
			}
		u++;
		}
	}

}
